#!/usr/bin/python

"""
	sqmc - Simple Query Manager Compiler
	usage:
		Put me to the root directory of the website.
		I'll convert .sqm files to .php scripts.	
"""

import os
import sys
import re

def convert_command(command, name, param, dirlevel, level):
	if command=="init":
		return "/* This file was generated by sqmc. */\ninclude_once(\""+("../"*dirlevel)+"sqm_engine.php\"); if(_sqm_recompile()) { include(__FILE__); die(); }", False
	elif command=="q":
		if name=="":
			name="last_{0}".format(level)
		return """
$_sqm_result_{0}=mysql_query("{1}",$_sqm_dbconn); 
if(!$_sqm_result_{0}) _sqm_add_error("MySQL error in q: ".mysql_error());
else {{ 
	$_sqm_rows_{0}=mysql_fetch_row($_sqm_result_{0}); 
	if($_sqm_rows_{0}&&$_sqm_rows_count_{0}=count($_sqm_rows_{0})) 
		for($_sqm_rows_iter_{0}=0;$_sqm_rows_iter_{0}<$_sqm_rows_count_{0};$_sqm_rows_iter_{0}++) 
		{{
			$_sqm_row_last=$_sqm_row_{0}=$_sqm_rows_{0}[$_sqm_rows_iter];
""".format(name,param), False
	elif command=="/q":
		return "}}", False
	elif command=="qr":
		if name=="":
			name="last_{0}".format(level)
		return """
$_sqm_result_{0}=mysql_query("{1}",$_sqm_dbconn); 
$_sqm_result_value_{0}="";
if(!$_sqm_result_{0}) _sqm_add_error("MySQL error in qr: ".mysql_error());
else $_sqm_result_value_{0}=mysql_result($_sqm_result_{0},0);""".format(name,param), "$_sqm_result_value_{0}".format(name)
	elif command=="qn":
		return "mysql_query(\"{0}\",$_sqm_dbconn);".format(param), False
	elif command=="iferror":
		return "if($_sqm_error!=\"\") {", False
	elif command=="/iferror":
		return "}", False
	elif command=="error":
		return "", "$_sqm_error"
	elif command=="delimit":
		if name=="":
			name="last_{0}".format(level)
		return "if($_sqm_rows_iter_{0}!=$_sqm_rows_count_{0}-1){{".format(name), False
	elif command=="/delimit": return "}", False
	elif command=="ifurl":
		""" //no-go
			if(substr($_sqm_php_endurl."/",0,strlen("{0}/"))=="{0}/")
			{{
				$_sqm_php_urlargs=explode("/",substr($_sqm_php_endurl,strlen("{0}")));
				/*print_r($_sqm_php_urlargs);die("");*/
		""".format(param)
		return """
			$_sqm_tempurl=($_sqm_php_endurl=="")?"/":$_sqm_php_endurl;
			if(in_array($_sqm_tempurl,explode(" ","{0}")))
			{{ $_sqm_ifurl_found=true;
			""".format(param), False

	elif command=="/ifurl":
		return "}", False
	elif command=="ifnourl":
		return "if(!$_sqm_ifurl_found){", False
	elif command=="/ifnourl":
		return "}", False
	elif command=="sqmcout":
		return "","htmlspecialchars($_sqm_coutput)"
	elif command=="include":
		return "include_once(\"{0}\");".format(param), False
	elif command=="fullbaseurl":
		return "", "\"http://\".$_SERVER[\"SERVER_NAME\"].(($_SERVER[\"SERVER_PORT\"]!=80)?\":\".$_SERVER[\"SERVER_PORT\"]:\"\").$_sqm_php_baseurl"
	elif command=="baseurl":
		return "", "$_sqm_php_baseurl"
	elif command=="ifauth":
		return "if($_SESSION[\"_sqm_user_loggedin\"]) {", False
	elif command=="/ifauth": return "}", False
	elif command=="else": return "} else {", False
	elif command=="ifpost": return "if($_SERVER['REQUEST_METHOD']==\"POST\") {", False
	elif command=="/ifpost" : return "}", False
	elif command=="dontflush": return "ob_start();", False
	elif command=="/dontflush": return "ob_end_clean();", False
	elif command=="ifauthfail": return "if($_SESSION[\"_sqm_auth_fail\"]) {", False
	elif command=="/ifauthfail": return "}", False
	elif command=="ifadmin": return "if($_SESSION[\"_sqm_user_isadmin\"]) {", False
	elif command=="/ifadmin": return "}", False
	elif command=="useremail": return "", "$_SESSION[\"_sqm_user_email\"]"
	elif command=="post": return "","((isset($_POST[\"{0}\"]))?$_POST[\"{0}\"]:\"\")".format(param)
	elif command=="get": return "","((isset($_GET[\"{0}\"]))?$_GET[\"{0}\"]:\"\")".format(param)
	elif command=="server": return "","((isset($_SERVER[\"{0}\"]))?$_SERVER[\"{0}\"]:\"\")".format(param)
	elif command=="session": return "","((isset($_SESSION[\"{0}\"]))?$_SESSION[\"{0}\"]:\"\")".format(param)
	elif command=="r": 
		#result tags (%[query_prefix:variable]) are converted to %{r:query_prefix variable} before processing
		if name=="": name="last_{0}".format(level)
		if not param.isdigit(): param="'"+param+"'"
		return "","$_sqm_row_{0}[{1}]".format(name,what)
	elif command=="tryauth":
		return "_sqm_tryauth();", False
	elif command=="escape":
		return "","mysql_real_escape_string(\"{0}\")".format(param)
	elif command=="redirect":
		return "header(\"Location: {0}\");".format(param), False
	elif command=="user":
		if name=="nick":
			return "", "$_SESSION[\"_sqm_user_nick\"]"
		elif name=="id":
			return "","$_SESSION[\"_sqm_user_id\"]"
		else:
			return "", "$_SESSION[\"_sqm_user\"]"
	elif command=="unauth": return "_sqm_resetuser();", False
	#elif command=="if": return "if(\"{0}\"!=\"0\"){{".format(param), False
	elif command=="if": return "if(eval(\"return {0};\")){{".format(param), False
	elif command=="/if": return "}", False
	elif command=="set": return "$_sqm_set_variable_{0}=true;".format(param), False
	elif command=="ifset": return "if({0}) {{".format("&&".join(map(lambda x:"isset($_sqm_set_variable_"+x+")",param.split(" ")))), False
	elif command=="/ifset": return "}", False
	elif command=="ifnset": return "if(!({0})) {{".format("&&".join(map(lambda x:"isset($_sqm_set_variable_"+x+")",param.split(" ")))), False
	elif command=="/ifnset": return "}", False
	elif command=="mailheaders": return "$_sqm_mail_additional_headers=\"{0}\";".format(param), False
	elif command=="sendmail":
		sp=param.split(" ",1)
		return "$_sqm_mail_addr=\"{0}\";\n$_sqm_mail_subject=\"{1}\";\n\nob_start();\n".format(sp[0],sp[1]), False
	elif command=="/sendmail":
		return "if(!mail($_sqm_mail_addr, $_sqm_mail_subject, ob_get_contents(),$_sqm_mail_additional_headers)) { _sqm_add_error(\"Mail delivery failed!\");} ob_end_clean();", False
	elif command[:2]=="--": return "",""
	return "_sqm_add_error(\"Missing SQM command: {0}\");".format(command), False

"""
def convert_include(prefix,what):
	if(prefix==""):
		prefix="last"
	if not what.isdigit(): what="'"+what+"'"
	return("$_sqm_row_{0}[{1}]".format(prefix,what))
"""

def convert_result_tags(data):
	#result tags (%[query_prefix:variable]) will be replaced with the "r" command
	#these cannot be nested into each other, so it's easier
	data=re.sub(r'%\[(.*?):(.*?)\]', r'%{r:\1 \2}', data)
	data=re.sub(r'%\[(.*?)\]', r'%{\1}', data)
	return data

def get_next_tag(data,starting,ending,last_at):
	#print "debug","gnt len",len(data)
	#if len(data)<100: print "debug","gnt data",data
	starting_place=next_starting=data.find(starting,last_at+1)
	next_ending=starting_place
	if starting_place == -1: return False
	while True:
		next_starting=data.find(starting,next_starting+1)
		if next_starting==-1: next_starting=len(data)-1
		next_ending=data.find(ending,next_ending+1)
		if next_ending==-1: next_ending=len(data)-1
		if next_starting>=next_ending:
			return (starting_place, next_ending+len(ending))
		#print "debug", "gnt noreturn, places", next_starting, next_ending, starting, ending
		#if next_starting==64: code.interact(local=locals())
	
def replace_tag(data,where,new,next_anything):
	return (data[:where[0]]+new+data[where[1]:], next_anything if where[0]<next_anything else next_anything-(where[1]-where[0])+len(new))
"""
def we_are_inside_a_command(data,where):
	global command_tag
	global include_tag
	return data[where:].count(command_tag[0])>data[where:].count(command_tag[1])
"""

command_tag=("%{","}")
result_tag=("%[","]")

def recursively_parse_commands(data,dir_level,level):
	global command_tag
	next_command=(-1,-1)
	add_before_command=""
	#code.interact(local=locals())
	while True:	
		#print "debug","rpc", "level =", level
		next_command=get_next_tag(data,command_tag[0],command_tag[1],next_command[0])
		if not next_command: break
		inside=data[next_command[0]+len(command_tag[0]):next_command[1]-len(command_tag[1])]
		if not inside: continue
		if inside.count(" ")>0:
			first_part,param=inside.split(" ",1)
		else:
			first_part,param=inside,""
		if first_part.count(":")>0:
			command,name=first_part.split(":",1)
		else:
			command,name=first_part,""
		#print "debug", "command =", command
		param=param.replace("\"","\\\"")
		param=param.replace("\\\\\"","\\\"") #quite hacky, but hope it works
		param,new_add_before_command=recursively_parse_commands(param,dir_level,level+1)
		add_before_command+=new_add_before_command
		#print "debug", "lenabe", len(add_before_command)
		to_replace,echo_me=convert_command(command,name,param,dir_level,level)
		if level==0: 
			if echo_me: 
				to_replace="<?php "+add_before_command+to_replace+" echo("+echo_me+"); ?>"
			else: to_replace="<?php "+add_before_command+to_replace+" ?>"
			add_before_command=""
		else:
			if echo_me: 
				add_before_command+=to_replace
				to_replace="\"."+echo_me+".\""
			else: 
				add_before_command=to_replace=""
				print "error: cannot insert non-echoable command into echoable one"
		data,next_command=replace_tag(data,next_command,to_replace,next_command)
	#if level==0: print data
	return (data, add_before_command) if level!=0 else data



"""
def convert_document(data,dir_level):
	global command_tag
	global include_tag
	next_include=(-1,-1)
	next_command=(-1,-1)
	

	#Process include tags %[prefix:name]
	while True:
		next_include=get_next_tag(data,include_tag[0],include_tag[1],next_include[0])
		if not next_include: break
		inside=data[next_include[0]+len(include_tag[0]):next_include[1]-len(include_tag[1])]
		if inside.count(":")>0:
			prefix,name=inside.split(":",1)
		else:
			prefix,name="",inside
		output_border=("\"+","+\"") if we_are_inside_a_command(data,next_include[0]) else ("<?=","?>")
		data,next_include=replace_tag(data,next_include,output_border[0]+convert_include(prefix,name)+output_border[1],next_include)
	#Process command tags %{name:command param}
	while True:
		next_command=get_next_tag(data,command_tag[0],command_tag[1],next_command[0])
		if not next_command: break
		inside=data[next_command[0]+len(command_tag[0]):next_command[1]-len(command_tag[1])]
		if not inside: continue
		if inside.count(" ")>0:
			first_part,param=inside.split(" ",1)
		else:
			first_part,param=inside,""
		if first_part.count(":")>0:
			command,name=first_part.split(":",1)
		else:
			command,name=first_part,""
			
		data,next_command=replace_tag(data,next_command,"<?php "+convert_command(command,name,param,dir_level)+" ?>",next_command)
	return data
"""

def main():
	print "sqmc by <ha7ilm@sdr.hu> (c) 2014"
	rootdir = "." if len(sys.argv)==1 else sys.argv[1]
	for root, subfolders, files in os.walk(rootdir):
		for afile in files:
			if afile[-4:]==".sqm":
				path=os.path.join(root,afile)
				php_path=path[:len(path)-3]+"php"
				print "converting {0} to {1}".format(path,php_path)
				infile=open(path,"r")
				outfile=open(php_path,"w")
				outfile.write(recursively_parse_commands(convert_result_tags(infile.read()),root.count("/"),0))

if __name__ == "__main__":
    main()

